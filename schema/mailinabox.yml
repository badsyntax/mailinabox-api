openapi: 3.0.3
info:
  title: Mail-in-a-Box
  description: 'Mail-in-a-Box API HTTP specification.'
  contact:
    name: Richard Willis
    url: https://github.com/badsyntax
    email: willis.rh@gmail.com
  license:
    name: MIT
    url: https://badsyntax.mit-license.org/
  version: '0.46.0'
externalDocs:
  description: Find out more about Mail-in-a-box
  url: https://mailinabox.email/
servers:
  - url: https://{host}/admin
    variables:
      host:
        default: box.example.com
        description: The API hostname
security:
  - basicAuth: []
tags:
  - name: user
    description: Endpoints related to users
  - name: system
    description: Endpoints related to system
paths:
  /me:
    get:
      tags:
        - user
      summary: Get user information
      operationId: getMe
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeResponse'
              examples:
                invalid:
                  value:
                    reason: Incorrect username or password
                    status: invalid
                ok:
                  value:
                    api_key: 1a2b3c4d5e6f7g8h9i0j
                    email: user@example.com
                    privileges:
                      - admin
                    status: ok
  /system/status:
    post:
      tags:
        - system
      summary: Retrieve system status
      operationId: getSystemStatus
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatusResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
  /system/privacy:
    get:
      tags:
        - system
      summary: Retrieve new-version check status
      operationId: getSystemPrivacyStatus
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemPrivacyStatusResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
    post:
      tags:
        - system
      summary: Update new-version check status
      operationId: updateSystemPrivacy
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SystemPrivacyUpdateRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/SystemPrivacyUpdateResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
  /system/reboot:
    get:
      tags:
        - system
      summary: Retrieve reboot status
      operationId: getSystemRebootStatus
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemRebootStatusResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
  /system/backup/status:
    get:
      tags:
        - system
      summary: Retrieve backup status
      operationId: getSystemBackupStatus
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemBackupStatusResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
  /system/backup/config:
    get:
      tags:
        - system
      summary: Retrieve backup config
      operationId: getSystemBackupConfig
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemBackupConfigResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
    post:
      tags:
        - system
      summary: Update backup config
      operationId: updateSystemBackupConfig
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SystemBackupConfigUpdateRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/SystemBackupConfigUpdateResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
        5XX:
          description: Server error
          content:
            text/html:
              schema:
                type: string
  /ssl/status:
    get:
      tags:
        - ssl
      summary: Retrieve SSL status
      operationId: getSSLStatus
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SSLStatusResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
  /ssl/csr/{domain}:
    post:
      tags:
        - ssl
      summary: Generate CSR for domain
      operationId: generateSSLCSR
      parameters:
        - in: path
          name: domain
          schema:
            $ref: '#/components/schemas/Hostname'
          required: true
          description: Domain to generate CSR for
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SSLCSRGenerateRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/SSLCSRGenerateResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
        5XX:
          description: Server error
          content:
            text/html:
              schema:
                type: string
  /ssl/install:
    post:
      tags:
        - ssl
      summary: Install custom certificate
      operationId: installSSLCertificate
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SSLCertificateInstallRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/SSLCertificateInstallResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
        5XX:
          description: Server error
          content:
            text/html:
              schema:
                type: string
  /dns/secondary-nameserver:
    get:
      tags:
        - dns
      summary: Retrieve secondary nameserver
      operationId: getDnsSecondaryNameserver
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSSecondaryNameserverResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
    post:
      tags:
        - dns
      summary: Add a secondary nameserver
      operationId: addDnsSecondaryNameserver
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DNSSecondaryNameserverAddRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/DNSSecondaryNameserverAddResponse'
        400:
          description: Bad request
          content:
            text/html:
              schema:
                type: string
                example: Could not resolve the IP address of badhostname
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
        5XX:
          description: Server error
          content:
            text/html:
              schema:
                type: string
  /dns/zones:
    get:
      tags:
        - dns
      summary: Retrieve DNS zones
      operationId: getDnsZones
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSZonesResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
  /dns/custom:
    get:
      tags:
        - dns
      summary: Retrieve custom DNS records
      operationId: getDnsCustomRecords
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSCustomResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
  /dns/custom/{domain}/{type}:
    parameters:
      - in: path
        name: domain
        schema:
          $ref: '#/components/schemas/Hostname'
        required: true
        description: DNS record domain
      - in: path
        name: type
        schema:
          $ref: '#/components/schemas/DNSRecordType'
        required: true
        description: Record type
    post:
      tags:
        - dns
      summary: Add a custom DNS record
      operationId: addDnsCustomRecord
      requestBody:
        $ref: '#/components/requestBodies/DNSCustomRecordRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/DNSCustomRecordAddResponse'
        400:
          description: Bad request
          content:
            text/html:
              schema:
                type: string
                example: "'badhostname' does not appear to be an IPv4 or IPv6 address"
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
        5XX:
          description: Server error
          content:
            text/html:
              schema:
                type: string
    delete:
      tags:
        - dns
      summary: Remove a custom DNS record
      operationId: removeDnsCustomRecord
      requestBody:
        $ref: '#/components/requestBodies/DNSCustomRecordRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/DNSCustomRecordRemoveResponse'
        400:
          description: Bad request
          content:
            text/html:
              schema:
                type: string
                example: badhostname is not a domain name or a subdomain of a domain name managed by this box
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
        5XX:
          description: Server error
          content:
            text/html:
              schema:
                type: string
  /dns/dump:
    get:
      tags:
        - dns
      summary: Retrieve all DNS records
      operationId: getDnsDump
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSDumpResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
  /mail/users:
    get:
      tags:
        - users
      summary: Retrieve all mail users
      operationId: getMailUsers
      parameters:
        - in: query
          name: format
          schema:
            $ref: '#/components/schemas/MailUsersResponseFormat'
          description: The format of the response
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailUsersResponse'
            text/html:
              schema:
                $ref: '#/components/schemas/MailUsersSimpleResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
  /mail/users/add:
    post:
      tags:
        - users
      summary: Add a new mail user
      operationId: addMailUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MailUserAddRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/MailUserAddResponse'
        400:
          description: Bad request
          content:
            text/html:
              schema:
                type: string
                example: Invalid email address
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
        5XX:
          description: Server error
          content:
            text/html:
              schema:
                type: string
  /mail/users/remove:
    post:
      tags:
        - users
      summary: Remove a mail user
      operationId: removeMailUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MailUserRemoveRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/MailUserRemoveResponse'
        400:
          description: Bad request
          content:
            text/html:
              schema:
                type: string
                example: That's not a user (invalid@example.com)
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
        5XX:
          description: Server error
          content:
            text/html:
              schema:
                type: string
  /mail/users/privileges/add:
    post:
      tags:
        - users
      summary: Add a privilege to a mail user
      operationId: addMailUserPrivilege
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MailUserAddAdminPrivilegeRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/MailUserAddAdminPrivilegeResponse'
        400:
          description: Bad request
          content:
            text/html:
              schema:
                type: string
                example: That's not a user (invalid@example.com)
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
        5XX:
          description: Server error
          content:
            text/html:
              schema:
                type: string
  /mail/users/privileges/remove:
    post:
      tags:
        - users
      summary: Remove a privilege from a mail user
      operationId: removeMailUserPrivilege
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MailUserRemoveAdminPrivilegeRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/MailUserRemoveAdminPrivilegeResponse'
        400:
          description: Bad request
          content:
            text/html:
              schema:
                type: string
                example: That's not a user (invalid@example.com)
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
        5XX:
          description: Server error
          content:
            text/html:
              schema:
                type: string
  /mail/users/password:
    post:
      tags:
        - users
      summary: Set a password for a user
      operationId: setMailUserPassword
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MailUserSetPasswordRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/MailUserSetPasswordResponse'
        400:
          description: Bad request
          content:
            text/html:
              schema:
                type: string
                example: Passwords must be at least eight characters
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
        5XX:
          description: Server error
          content:
            text/html:
              schema:
                type: string
  /mail/aliases:
    get:
      tags:
        - aliases
      summary: Retrieve all aliases
      operationId: getMailAliases
      parameters:
        - in: query
          name: format
          schema:
            $ref: '#/components/schemas/MailAliasesResponseFormat'
          description: The format of the response
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MailAliasByDomain'
            text/html:
              schema:
                $ref: '#/components/schemas/MailAliasesSimpleResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
  /mail/aliases/add:
    post:
      tags:
        - aliases
      summary: Add or update mail alias
      operationId: upsertMailAlias
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MailAliasUpsertRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/MailAliasUpsertResponse'
        400:
          description: Bad request
          content:
            text/html:
              schema:
                type: string
                example: Invalid email address (invalid@example.com)
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
        5XX:
          description: Server error
          content:
            text/html:
              schema:
                type: string
  /mail/aliases/remove:
    post:
      tags:
        - aliases
      summary: Remove a mail alias
      operationId: removeMailAlias
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MailAliasRemoveRequest'
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/MailAliasRemoveResponse'
        400:
          description: Bad request
          content:
            text/html:
              schema:
                type: string
                example: That's not an alias (invalid@example)
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
        5XX:
          description: Server error
          content:
            text/html:
              schema:
                type: string
  /web/domains:
    get:
      tags:
        - web
      summary: Retrieve all static web domains
      operationId: getWebDomains
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebDomain'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
  /web/update:
    post:
      tags:
        - web
      summary: Update static websites
      operationId: updateWeb
      responses:
        200:
          description: Successful operation
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/WebUpdateResponse'
        403:
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  requestBodies:
    DNSCustomRecordRequest:
      description: The value of the DNS record
      required: true
      content:
        text/plain:
          schema:
            type: string
  schemas:
    MailUsersResponseFormat:
      type: string
      enum:
        - text
        - json
      example: json
      description: Response format
    MailAliasesResponseFormat:
      type: string
      enum:
        - text
        - json
      example: json
      description: Response format
    MailUserSetPasswordResponse:
      type: string
      example: OK
    MailUserRemoveResponse:
      type: string
      example: OK
    MailUserAddResponse:
      type: string
      example: |
        mail user added
        updated DNS: OpenDKIM configuration
    MailUserAddAdminPrivilegeResponse:
      type: string
      example: OK
    MailUserRemoveAdminPrivilegeResponse:
      type: string
      example: OK
    MailUsersSimpleResponse:
      type: string
      example: |
        email1@example.com
        email2@example.com
    MailUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/MailUserByDomain'
    MailUserByDomain:
      type: object
      required:
        - domain
        - users
      properties:
        domain:
          $ref: '#/components/schemas/Hostname'
        users:
          type: array
          items:
            $ref: '#/components/schemas/MailUser'
    MailUser:
      type: object
      required:
        - email
        - privileges
        - status
      properties:
        email:
          $ref: '#/components/schemas/Email'
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/MailUserPrivilege'
        status:
          $ref: '#/components/schemas/MailUserStatus'
        mailbox:
          type: string
          example: /home/user-data/mail/mailboxes/example.com/user
    MailAliasesSimpleResponse:
      type: string
      example: |
        abuse@example.com	administrator@example.com
        admin@example.com	administrator@example.com
    MailAliasByDomain:
      type: object
      required:
        - domain
        - aliases
      properties:
        domain:
          $ref: '#/components/schemas/Hostname'
        aliases:
          type: array
          items:
            $ref: '#/components/schemas/MailAlias'
    MailAlias:
      type: object
      required:
        - address
        - address_display
        - forwards_to
        - permitted_senders
        - required
      properties:
        address:
          $ref: '#/components/schemas/Email'
        address_display:
          $ref: '#/components/schemas/Email'
        forwards_to:
          type: array
          items:
            $ref: '#/components/schemas/MailAddress'
        permitted_senders:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/MailAddress'
        required:
          type: boolean
          example: true
    MailAddress:
      $ref: '#/components/schemas/Email'
    MailAliasUpsertResponse:
      type: string
      example: alias updated
    MailAliasUpsertRequest:
      type: object
      required:
        - update_if_exists
        - address
        - forwards_to
        - permitted_senders
      properties:
        update_if_exists:
          type: integer
          format: int32
          minimum: 0
          maximum: 1
          example: 1
        address:
          type: string
          example: user@example.com
        forwards_to:
          type: string
          example: email1@example.com, example2@example.com
        permitted_senders:
          type: string
          nullable: true
          example: email1@example.com, example2@example.com
    MailAliasRemoveResponse:
      type: string
      example: alias removed
    MailAliasRemoveRequest:
      type: object
      required:
        - address
      properties:
        address:
          $ref: '#/components/schemas/Email'
    DNSRecordType:
      enum:
        - A
        - AAAA
        - CAA
        - CNAME
        - TXT
        - MX
        - SRV
        - SSHFP
        - NS
      example: MX
    DNSDumpResponse:
      type: array
      items:
        $ref: '#/components/schemas/DNSDumpDomains'
    DNSDumpDomains:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/Hostname'
          - $ref: '#/components/schemas/DNSDumpDomainRecords'
    DNSDumpDomainRecords:
      type: array
      items:
        $ref: '#/components/schemas/DNSDumpDomainRecord'
    DNSDumpDomainRecord:
      type: object
      required:
        - explanation
        - qname
        - type
        - value
      properties:
        explanation:
          type: string
          example: Required. Specifies the hostname (and priority) of the machine that handles @example.com mail
        qname:
          $ref: '#/components/schemas/Hostname'
        rtype:
          $ref: '#/components/schemas/DNSRecordType'
        value:
          type: string
          example: 10 example.com.
    DNSCustomRecord:
      type: object
      required:
        - qname
        - rtype
        - value
      properties:
        qname:
          $ref: '#/components/schemas/Hostname'
        rtype:
          $ref: '#/components/schemas/DNSRecordType'
        value:
          type: string
          example: 10 example.com.
    DNSCustomResponse:
      type: array
      items:
        $ref: '#/components/schemas/DNSCustomRecord'
    DNSZonesResponse:
      type: array
      items:
        $ref: '#/components/schemas/Hostname'
    DNSSecondaryNameserverResponse:
      type: object
      required:
        - hostnames
      properties:
        hostnames:
          type: array
          items:
            type: string
            example: ns1.example.com
    DNSCustomRecordRemoveResponse:
      type: string
      example: 'updated DNS: example.com'
    DNSCustomRecordAddResponse:
      type: string
      example: 'updated DNS: example.com'
    DNSSecondaryNameserverAddRequest:
      type: object
      required:
        - hostnames
      properties:
        hostnames:
          type: string
          description: Hostnames separated with commas or spaces
          example: ns2.hostingcompany.com, ns3.hostingcompany.com
    DNSSecondaryNameserverAddResponse:
      type: string
      example: 'updated DNS: example.com'
    SystemPrivacyUpdateRequest:
      type: object
      required:
        - value
      properties:
        value:
          $ref: '#/components/schemas/SystemPrivacyStatus'
    SystemPrivacyStatus:
      type: string
      enum:
        - private
        - 'off'
      example: private
    MailUserSetPasswordRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
    MailUserAddRequest:
      type: object
      required:
        - email
        - password
        - privileges
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
        privileges:
          $ref: '#/components/schemas/MailUserPrivilege'
    MailUserRemoveRequest:
      type: object
      required:
        - email
      properties:
        email:
          $ref: '#/components/schemas/Email'
    MailUserStatus:
      type: string
      enum:
        - active
        - inactive
      example: active
    MailUserPrivilege:
      type: string
      enum:
        - admin
        - ''
      example: admin
    MailUserAddAdminPrivilegeRequest:
      type: object
      required:
        - email
        - privilege
      properties:
        email:
          $ref: '#/components/schemas/Email'
        privilege:
          $ref: '#/components/schemas/MailUserPrivilege'
    MailUserRemoveAdminPrivilegeRequest:
      type: object
      required:
        - email
        - privilege
      properties:
        email:
          $ref: '#/components/schemas/Email'
        privilege:
          $ref: '#/components/schemas/MailUserPrivilege'
    SSLCSRGenerateRequest:
      type: object
      required:
        - countrycode
      properties:
        countrycode:
          type: string
          example: GB
    SSLCSRGenerateResponse:
      type: string
      example: |
        -----BEGIN CERTIFICATE REQUEST-----
        MIICaDCCAVACAQAwIzELMAkGA1UEBhMCQlMxFDASBgNVBAMMC2V4YW1wbGUuY29t
        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3K6dwLM2Nk8kVhIBaZmp
        eY6y7O0T3jrexEKlW839TVYdcH+K35V1NxilbMFKMuHeowGwFyyiqOy/OUYNeq+T
        Rz3s4b1qG2p01dwlsXHHYmXLYTAhvqvY+CU5ksieuZbyHRTwbHViQ0xtRXwoVCnj
        CkN7kJVpkLfVN0/BG6NBFpv/JI8F+hwp+IHdkC1gUXRrLJNC79ERqFP8HoqdQWNw
        OGGFaOe2aQhvj2zt8wFncyKVc40UKVbSzGGzdL2MPiAJHgZ2lmeY1xDyX1lOt12R
        IFPwtxmbxaxYaVfe2hxl7m88xV3OjYcKgwVYDusk2XJ37cGew5g+NbBvzEeEUpF9
        5wIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAD7UPC3/Nkgpn53mT9puUonYdJg9
        SD8vvTK/N78CzoEgPNyq+bYbqlcvVPKIdItf9TMiqfOSvW3e3NvkRisYle8Qp+0C
        8pafXBvQ9eHt5CFeJn4sH9GnxeflOZT/P9Jnp71KtZQvOobirX4GgEWs79g+/NHb
        Zyf8rbadt9HruNhKA5nlP8cn7Rdc/iuJU8MVSQszI1s1DEcXMPxr6iqb2g87/ifH
        lWcK59kvRJkCcPhPzjpUy9NulucH4WFA/WqKeDNFS/oC+upV5w8EDEcfnenJFG+N
        JmFDQESSfUxLPHLC660Wnf3GmrP/duZHpPC+qTe8b1AlQ7zDT3cOaAQ+Mb0=
        -----END CERTIFICATE REQUEST-----
    SSLCertificateInstallRequest:
      type: object
      required:
        - domain
        - cert
        - chain
      properties:
        domain:
          $ref: '#/components/schemas/Hostname'
        cert:
          type: string
          description: TLS/SSL certificate
          example: |
            -----BEGIN CERTIFICATE-----
            MIICaDCCAVACAQAwIzELMAkGA1UEBhMCQlMxFDASBgNVBAMMC2V4YW1wbGUuY29t
            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3K6dwLM2Nk8kVhIBaZmp
            eY6y7O0T3jrexEKlW839TVYdcH+K35V1NxilbMFKMuHeowGwFyyiqOy/OUYNeq+T
            Rz3s4b1qG2p01dwlsXHHYmXLYTAhvqvY+CU5ksieuZbyHRTwbHViQ0xtRXwoVCnj
            CkN7kJVpkLfVN0/BG6NBFpv/JI8F+hwp+IHdkC1gUXRrLJNC79ERqFP8HoqdQWNw
            OGGFaOe2aQhvj2zt8wFncyKVc40UKVbSzGGzdL2MPiAJHgZ2lmeY1xDyX1lOt12R
            IFPwtxmbxaxYaVfe2hxl7m88xV3OjYcKgwVYDusk2XJ37cGew5g+NbBvzEeEUpF9
            5wIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAD7UPC3/Nkgpn53mT9puUonYdJg9
            SD8vvTK/N78CzoEgPNyq+bYbqlcvVPKIdItf9TMiqfOSvW3e3NvkRisYle8Qp+0C
            8pafXBvQ9eHt5CFeJn4sH9GnxeflOZT/P9Jnp71KtZQvOobirX4GgEWs79g+/NHb
            Zyf8rbadt9HruNhKA5nlP8cn7Rdc/iuJU8MVSQszI1s1DEcXMPxr6iqb2g87/ifH
            lWcK59kvRJkCcPhPzjpUy9NulucH4WFA/WqKeDNFS/oC+upV5w8EDEcfnenJFG+N
            JmFDQESSfUxLPHLC660Wnf3GmrP/duZHpPC+qTe8b1AlQ7zDT3cOaAQ+Mb0=
            -----END CERTIFICATE-----
        chain:
          type: string
          description: TLS/SSL intermediate chain (if provided, else empty string)
          example: |
            -----BEGIN CERTIFICATE-----
            MIICaDCCAVACAQAwIzELMAkGA1UEBhMCQlMxFDASBgNVBAMMC2V4YW1wbGUuY29t
            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3K6dwLM2Nk8kVhIBaZmp
            eY6y7O0T3jrexEKlW839TVYdcH+K35V1NxilbMFKMuHeowGwFyyiqOy/OUYNeq+T
            Rz3s4b1qG2p01dwlsXHHYmXLYTAhvqvY+CU5ksieuZbyHRTwbHViQ0xtRXwoVCnj
            CkN7kJVpkLfVN0/BG6NBFpv/JI8F+hwp+IHdkC1gUXRrLJNC79ERqFP8HoqdQWNw
            OGGFaOe2aQhvj2zt8wFncyKVc40UKVbSzGGzdL2MPiAJHgZ2lmeY1xDyX1lOt12R
            IFPwtxmbxaxYaVfe2hxl7m88xV3OjYcKgwVYDusk2XJ37cGew5g+NbBvzEeEUpF9
            5wIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAD7UPC3/Nkgpn53mT9puUonYdJg9
            SD8vvTK/N78CzoEgPNyq+bYbqlcvVPKIdItf9TMiqfOSvW3e3NvkRisYle8Qp+0C
            8pafXBvQ9eHt5CFeJn4sH9GnxeflOZT/P9Jnp71KtZQvOobirX4GgEWs79g+/NHb
            Zyf8rbadt9HruNhKA5nlP8cn7Rdc/iuJU8MVSQszI1s1DEcXMPxr6iqb2g87/ifH
            lWcK59kvRJkCcPhPzjpUy9NulucH4WFA/WqKeDNFS/oC+upV5w8EDEcfnenJFG+N
            JmFDQESSfUxLPHLC660Wnf3GmrP/duZHpPC+qTe8b1AlQ7zDT3cOaAQ+Mb0=
            -----END CERTIFICATE-----
    SSLCertificateInstallResponse:
      type: string
      example: OK
    SystemPrivacyStatusResponse:
      type: boolean
      description: |
        Response:
        * `true`: Private, new-version checks will not be performed
        * `false`: Not private, new-version checks will be performed
      example: false
    SystemPrivacyUpdateResponse:
      type: string
      example: OK
    SystemRebootStatusResponse:
      type: boolean
      description: |
        Response:
        * `true`: A reboot is required
        * `false`: A reboot is not required
      example: true
    SystemStatusResponse:
      type: array
      items:
        $ref: '#/components/schemas/StatusEntry'
    StatusEntry:
      type: object
      required:
        - type
        - text
        - extra
      properties:
        type:
          $ref: '#/components/schemas/StatusEntryType'
        text:
          type: string
          example: This domain's DNSSEC DS record is not set
        extra:
          type: array
          items:
            $ref: '#/components/schemas/StatusEntryExtra'
    StatusEntryType:
      type: string
      enum:
        - heading
        - ok
        - warning
        - error
      example: warning
    StatusEntryExtra:
      type: object
      required:
        - monospace
        - text
      properties:
        monospace:
          type: boolean
          example: false
        text:
          type: string
          example: 'Digest Type: 2 / SHA-256'
    SystemBackupConfigUpdateRequest:
      type: object
      required:
        - target
        - target_user
        - target_pass
        - min_age
      properties:
        target:
          type: string
          format: hostname
          example: s3://s3.eu-central-1.amazonaws.com/box-example-com
        target_user:
          type: string
          example: username
        target_pass:
          type: string
          example: password
        min_age:
          type: integer
          format: int32
          minimum: 1
          example: 3
    SystemBackupConfigUpdateResponse:
      type: string
      example: OK
    SystemBackupConfigResponse:
      type: object
      required:
        - enc_pw_file
        - file_target_directory
        - min_age_in_days
        - ssh_pub_key
        - target
      properties:
        enc_pw_file:
          type: string
          example: /home/user-data/backup/secret_key.txt
        file_target_directory:
          type: string
          example: /home/user-data/backup/encrypted
        min_age_in_days:
          type: integer
          format: int32
          minimum: 1
          example: 3
        ssh_pub_key:
          type: string
          example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDb root@box.example.com\n
        target:
          type: string
          format: hostname
          example: s3://s3.eu-central-1.amazonaws.com/box-example-com
        target_user:
          type: string
        target_pass:
          type: string
    SystemBackupStatusResponse:
      type: object
      required:
        - unmatched_file_size
      properties:
        backups:
          type: array
          items:
            $ref: '#/components/schemas/SystemBackupStatus'
        unmatched_file_size:
          type: integer
          format: int32
          example: 0
        error:
          type: string
          example: Something is wrong with the backup
    SystemBackupStatus:
      type: object
      required:
        - date
        - date_delta
        - date_str
        - full
        - size
        - volumes
      properties:
        date:
          type: string
          format: date-time
          example: 20200801T023706Z
        date_delta:
          type: string
          example: 15 hours, 40 minutes
        date_str:
          type: string
          example: 2020-08-01 03:37:06 BST
        deleted_in:
          type: string
          example: approx. 6 days
        full:
          type: boolean
          example: false
        size:
          type: integer
          format: int32
          example: 125332
        volumes:
          type: integer
          format: int32
          example: 1
    SSLStatusResponse:
      type: object
      required:
        - can_provision
        - status
      properties:
        can_provision:
          type: array
          items:
            type: string
        status:
          type: array
          items:
            $ref: '#/components/schemas/SSLStatus'
    SSLStatus:
      type: object
      required:
        - domain
        - status
        - text
      properties:
        domain:
          $ref: '#/components/schemas/Hostname'
        status:
          $ref: '#/components/schemas/SSLStatusType'
        text:
          type: string
          example: Signed & valid. The certificate expires in 87 days on 10/28/20.
    SSLStatusType:
      type: string
      enum:
        - success
        - danger
        - not-applicable
      example: success
    Email:
      type: string
      format: email
      example: user@example.com
    Hostname:
      type: string
      format: hostname
      example: example.com
    MeResponse:
      type: object
      required:
        - status
      properties:
        api_key:
          type: string
          example: 12345abcde
        email:
          $ref: '#/components/schemas/Email'
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/MailUserPrivilege'
        reason:
          type: string
          example: Incorrect username or password
        status:
          $ref: '#/components/schemas/MeAuthStatus'
    MeAuthStatus:
      type: string
      enum:
        - ok
        - invalid
      example: invalid
    WebDomain:
      type: object
      required:
        - custom_root
        - domain
        - root
        - ssl_certificate
        - static_enabled
      properties:
        custom_root:
          type: string
          example: /home/user-data/www/example.com
        domain:
          $ref: '#/components/schemas/Hostname'
        root:
          type: string
          example: /home/user-data/www/default
        ssl_certificate:
          type: array
          minItems: 2
          maxItems: 2
          uniqueItems: true
          items:
            oneOf:
              - type: string
                example: No certificate installed.
              - type: string
                enum:
                  - danger
                  - success
                example: danger
        static_enabled:
          type: boolean
          example: true
    WebUpdateResponse:
      type: string
      example: web updated
